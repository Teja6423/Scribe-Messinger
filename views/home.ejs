<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/home.css">
  <title>Scribe Messenger</title>
  <style>
    /* Popup message styles */
    .popup-message {
        display: none;
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        padding: 15px;
        border-radius: 5px;
        color: #fff;
        z-index: 1000;
    }
    .popup-message.success {
        background-color: #28a745; /* Green for success */
    }
    .popup-message.error {
        background-color: #dc3545; /* Red for error */
    }
    .availability-check {
        font-size: 0.9em;
        color: #dc3545; /* Red color for error */
        margin-top: 5px;
    }
  </style>
</head>
<body>
  <div id="popupMessage">
  </div>


  <div class="container">
    <div class="sidebar">
      <div class="header">
        <div class="user-info">
          <% if (userdata.username) { %>
            <span class="username">Logged in as <%= userdata.username %></span>
            <span class="last-message">ID:#<%= userdata.id %></span>
          <% } %>

          <form action="/logout" method="post">
            <button type="submit" class="logout">Logout</button>
          </form>
        </div>
        <div class="options">
          <button class="btn" id="conversationsBtn">Conversations</button>
          <button class="btn" id="addFriendBtn">Add Friend</button>
        </div>
      </div>
      <div class="search">
        <input type="text" placeholder="Search...">
      </div>
      <div class="conversations">
        <!-- List of conversations -->
        <ul id="conversationList">
          <% friends.forEach(friend => { %>
            <form method="get" action="/home" onclick="submit('<%= friend.friend_id %>')">

              <li class="conversation">
                <div class="conversation-info">
                  <span class="friend-name"><%= friend.friend_name %></span>
                  <span class="last-message">ID:#<%= friend.friend_id %></span>
                  <input type="hidden" name="friend_id" value="<%= friend.friend_id %>">
                </div>
            </li>
            </form>

          <% }); %>
        </ul>
      </div>
      <form action="/add-friend" method="post">
        <div class="add-friend" style="display: none;">
          <input type="text" name="username" placeholder="Enter username to add" id="friendUsername">
          <button class="btn" id="addFriendButton">Add</button>
        </div>
      </form>
    </div>
    <div class="chat-area">
      <!-- Chat area for displaying messages -->
      <div class="chat-header">
        <span class="chat-username"><%= friend_name || "Friend's Username" %></span>
      </div>
      <div class="messages">
        <% messages.forEach(msg => { %>
          <% if (msg.receiver_id == userdata.id) { %>
            <div class="message received">
              <p class="message-text"><%= msg.message %></p>
              <span class="message-time"><%= msg.time %></span>
            </div>
          <% } else { %>
            <div class="message sent">
              <p class="message-text"><%= msg.message %></p>
              <span class="message-time"><%= msg.time %></span>
            </div>
          <% } %>
        <% }); %>
      </div>
      <div class="message-input">
        <form action="/home" method="post">
          <input type="hidden" name="friend_id" value="<%= friend_id %>">
          <input type="text" name="message" placeholder="Type a message...">
          <button class="send-btn">Send</button>
        </form>
      </div>
    </div>
    
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const conversationsBtn = document.getElementById("conversationsBtn");
      const addFriendBtn = document.getElementById("addFriendBtn");
      const conversationList = document.querySelector(".conversations");
      const addFriendSection = document.querySelector(".add-friend");
      const popupMessage = document.getElementById('popupMessage');

      // Function to update messages in the chat area
      function updateMessages() {
        const friendId = '<%= friend_id %>';
        const userId = '<%= userdata.id %>'; // Make sure userdata.id is available in your template
    
        if (!friendId || !userId) return; // Do not fetch if no friendId or userId is set
    
        fetch(`/home?friend_id=${encodeURIComponent(friendId)}`, {
          headers: {
            'Accept': 'application/json'
          }
        })
        .then(response => response.json()) // Directly parse JSON
        .then(data => {
          const messagesContainer = document.querySelector('.messages');
          messagesContainer.innerHTML = ''; // Clear existing messages
    
          data.messages.forEach(msg => {
            const messageDiv = document.createElement('div');
            // Determine message class based on receiver_id
            messageDiv.className = 'message ' + (msg.receiver_id === parseInt(userId) ? 'received' : 'sent');
            messageDiv.innerHTML = `
              <p class="message-text">${msg.message}</p>
              <span class="message-time">${msg.time}</span>
            `;
            messagesContainer.appendChild(messageDiv);
          });
    
          // Scroll to the bottom of the messages container
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        })
        .catch((error) => {
          console.error('Error fetching messages:', error);
        });
      }
    
      // Set interval to update messages every 5 seconds
      setInterval(updateMessages, 5000);
    
      // Initial call to populate messages
      updateMessages();
    
      // Function to submit the form for a selected conversation
      function submitForm(friendId) {
        document.getElementById('form_' + friendId).submit();
      }
    
      // Event listeners for toggling between conversations and add friend sections
      conversationsBtn.addEventListener("click", () => {
        conversationList.style.display = "block";
        addFriendSection.style.display = "none";
      });
    
      addFriendBtn.addEventListener("click", () => {
        conversationList.style.display = "none";
        addFriendSection.style.display = "block";
      });
    
      // Display the popup message if it exists
      function showPopupMessage(message, type) {
        if (!popupMessage) {
          console.error('Popup message element not found');
          return;
        }
        console.log('Showing popup message:', message, type); // Debugging line
        popupMessage.textContent = message;
        popupMessage.className = `popup-message ${type}`;
        popupMessage.style.display = 'block';
        setTimeout(() => {
          popupMessage.style.display = 'none';
        }, 5000); // Hide message after 5 seconds
      }

      // Display messages from URL parameters
      const urlParams = new URLSearchParams(window.location.search);
      const message = urlParams.get('message');
      const type = urlParams.get('type');

      console.log('URL Parameters:', { message, type }); // Debugging line

      if (message && type) {
        showPopupMessage(message, type);
      }
    });
  </script>
    
</body>
</html>
